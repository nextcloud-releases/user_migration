<?php

declare(strict_types=1);
/**
 * @copyright Copyright (c) 2022 CÃ´me Chilliet <come.chilliet@nextcloud.com>
 *
 * @license GNU AGPL version 3 or any later version
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

use OCP\UserMigration\IMigrator as IUserMigrator;

class OC {
	/**
	 * @var \OCP\IServerContainer
	 */
	public static $server;
}

class OC_App {
	public static function getAppVersions();
}

namespace OC\Archive {
	abstract class Archive {
		abstract public function __construct(string $source);
		abstract public function addFolder(string $path): bool;
		abstract public function addFile(string $path, string $source = ''): bool;
		abstract public function rename(string $source, string $dest): bool;
		/**
		* @return int|false
		*/
		abstract public function filesize(string $path);
		/**
		* @return int|false
		*/
		abstract public function mtime(string $path);
		abstract public function getFolder(string $path): array;
		abstract public function getFiles(): array;
		/**
		* @return string|false
		*/
		abstract public function getFile(string $path);
		abstract public function extractFile(string $path, string $dest): bool;
		abstract public function extract(string $dest): bool;
		abstract public function fileExists(string $path): bool;
		abstract public function remove(string $path): bool;
		/**
		* @return false|resource
		*/
		abstract public function getStream(string $path, string $mode);
	}
	class ZIP extends Archive
	{
		public function __construct(string $source);
	}
}

namespace OC\AppFramework\Bootstrap {
	class Coordinator {
		public function getRegistrationContext(): ?RegistrationContext {}
	}

	class RegistrationContext {
		/**
		* @return ServiceRegistration<IUserMigrator>[]
		*/
		public function getUserMigrators(): array {}
	}

	/**
	* @psalm-immutable
	* @template T
	*/
	class ServiceRegistration extends ARegistration {
		/**
		* @psalm-return class-string<T>
		*/
		public function getService(): string {}
	}

	/**
	* @psalm-immutable
	*/
	abstract class ARegistration {
		public function getAppId(): string {}
	}
}

namespace OCA\Files\AppInfo {
	class Application {
		public const APP_ID = 'files';
	}
}

namespace OCA\Files_Versions {
	class Storage {
		public const VERSIONS_ROOT = 'files_versions/';
	}
}

namespace OC\Hooks {
	interface Emitter {
	}
}

namespace OC\Cache {

	use OCP\ICache;

	class CappedMemoryCache implements ICache, \ArrayAccess {
		public function __construct($capacity = 512);
		public function hasKey($key): bool {}
		public function get($key) {}
		public function set($key, $value, $ttl = 0): bool {}
		public function remove($key) {}
		public function clear($prefix = '') {}
		public function offsetExists($offset): bool {}
		public function &offsetGet($offset) {}
		public function offsetSet($offset, $value): void {}
		public function offsetUnset($offset): void {}
		public function getData() {}
		public static function isAvailable(): bool {}
	}
}
